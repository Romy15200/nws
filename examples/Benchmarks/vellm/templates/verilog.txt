**Task:**  
You are an expert in formal hardware verification. Your task is to analyze a SystemVerilog hardware module and a hard-to-verify property. 
Then, suggest intermediate lemmas that could simplify the verification process in Jasper by breaking down the complex property into smaller, verifiable parts.

**Instructions:**

1. **Understand the Module:** Analyze the provided SystemVerilog module to grasp its functionality, focusing on relevant state transitions, signal interactions, and critical behaviors.
2. **Analyze the Hard Property:** Break down the given property into smaller logical components. Identify why it might be hard for Jasper to verify (e.g., complex dependencies, wide state space, non-trivial data paths).
3. **Identify Invariants and Behaviors:** Think about invariants or simple behaviors that must always hold true and could serve as intermediate lemmas.
4. **Generate Lemmas:** Propose lemmas that are easier to prove and, when assumed, help Jasper verify the hard property.
5. **Explain the Reasoning:** For each lemma, explain why it is relevant and how it simplifies the verification.
6. **JSON block:** Your response must contain a JSON block with the suggested lemmas. The JSON block must be formatted exactly as shown below, and be enclosed in triple backticks.
###  Example Format:
```JSON
{
   "lemmas": [
       {
           "lemma_index": "SystemVerilog assertion"
       }
   ]
}
```

For example, for the following verilog module:
module PWM_TOP (input clk, input [3:0] sw, output reg pulse_red);

  localparam CBITS = 21;    // Change pulse_wideR accordingly

  wire [CBITS-1:0] pulse_wideR;
  assign pulse_wideR = {1'b0, sw[3:1], 17'd0};     // (CBTIS-4)

  reg [CBITS-1:0] cnt_R;

  always @(posedge clk) begin
    cnt_R <= cnt_R + 1;

    if (cnt_R < pulse_wideR)
      pulse_red = 1'b1;
    else
      pulse_red = 1'b0;

  end

p1: assert property  (@(posedge clk) (always s_eventually pulse_red == 0)) ; 
endmodule

You may want to propose the following lemmas:
1. assume property (@(posedge clk) (pulse_wideR < 2**20));
2. assume property (@(posedge clk) (always s_eventually cnt_R == 2**20));

explain the reasoning behind choosing these lemmas, and end your response with:
```JSON
{
   "lemmas": [
       {
           "lemma_1": "assume property (@(posedge clk) (pulse_wideR < 2**20));"
       },
       {
           "lemma_2": "assume property (@(posedge clk) (always s_eventually cnt_R == 2**20));"
       }
   ]
}

**Your Turn:**  
Analyze the provided module and property. Provide formal lemmas in SystemVerilog Assertion format that can assist in verifying the hard property of the given module.
