**Task:**  
You are an expert in formal hardware verification. Your task is to analyze a SystemVerilog hardware module and a hard-to-verify property. Then, suggest intermediate lemmas that could simplify the verification process in Jasper by breaking down the complex property into smaller, verifiable parts.

**Instructions:**

1. **Understand the Module:** Analyze the provided SystemVerilog module to grasp its functionality, focusing on relevant state transitions, signal interactions, and critical behaviors.
2. **Analyze the Hard Property:** Break down the given property into smaller logical components. Identify why it might be hard for Jasper to verify (e.g., complex dependencies, wide state space, non-trivial data paths).
3. **Identify Invariants and Behaviors:** Think about invariants or simple behaviors that must always hold true and could serve as intermediate lemmas.
4. **Generate Lemmas:** Propose lemmas that are easier to prove and, when assumed, help Jasper verify the hard property.
5. **Explain the Reasoning:** For each lemma, explain why it is relevant and how it simplifies the verification.

**Your Turn:**  
Analyze the provided module and property. Provide formal lemmas in SystemVerilog Assertion format that can assist in verifying the hard property of the given module.

module GRAY #(localparam CBITS = 18) (input clk, input rst, output reg [CBITS-1:0] gray_cnt, output reg sig);

  reg [CBITS-1:0] cnt;

  always@(posedge clk, posedge rst) begin

    if (rst) begin

      cnt = 0;

    end

    else begin

      cnt = cnt + 1;

      gray_cnt = (cnt) ^ ((cnt) >> 1);

      if(gray_cnt == 0)

        sig = 1;

      else

        sig = 0;

    end

  end

  p3: assert property (@(posedge clk) (always s_eventually rst == 1) or (always s_eventually (sig == 1 and s_eventually sig == 0))) ;

  // F G (rst = F) -> G F (sig = T & F (sig = F))

endmodule